/*
 * Copyright 2021 Janis Tzoumas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.web.scraping.lib.dom.data.parsing.steps;

import com.github.web.scraping.lib.parallelism.ParsedDataListener;

import java.util.function.BiConsumer;
import java.util.function.Supplier;

public interface HtmlUnitStepSupportingCollection<C> {

    /**
     * @param accumulator   operation that inserts a model instance into the container
     * @param containerType type of model to insert into
     * @param modelType     type of model to insert
     * @return reference to the same object the method was called on
     */
    <R, T> C collect(BiConsumer<R, T> accumulator, Class<R> containerType, Class<T> modelType);

    /**
     * Sets up custom models that will be used to store the scraped data
     *
     * @param modelSupplier a factory for new model instances that parsed data can be set to in the steps following this one
     * @param modelType     needed for type safety
     * @return reference to the same object the method was called on
     */
    <T> C setCollector(Supplier<T> modelSupplier, Class<T> modelType);

    /**
     * Sets up custom models that will be used to store the scraped data
     *
     * @param modelSupplier      a factory for new model instances that parsed data can be set to in the steps following this one.
     *                           Use method {@link HtmlUnitStepSupportingCollection#collect(BiConsumer, Class, Class)}
     *                           to achieve composition of various models of parsed data.
     * @param modelType          type of generated model
     * @param parsedDataListener registration of listener that will be notified when all scraping has finished for an instance of
     *                           model generated by the provided modelSupplier - this instance will be published via the listener to client code
     * @return reference to the same object the method was called on
     */
    <T> C setCollector(Supplier<T> modelSupplier, Class<T> modelType, ParsedDataListener<T> parsedDataListener);

}
